{"version":3,"sources":["app/Home/ButtonBuy.tsx","app/Home/Item.tsx","app/Home/Home.tsx","app/Checkout/Form.tsx","app/Checkout/verifyWallet.ts","app/Checkout/CheckoutError.tsx","app/Checkout/Checkout.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonBuy","price","url","Flex","alignItems","Text","fontSize","Icon","name","ml","to","Button","icon","Item","id","description","image","isNew","Box","p","width","Card","position","right","top","Pill","color","Image","alt","src","mb","Heading","as","Home","flexWrap","items","map","item","key","Form","state","status","transactionId","handleSend","setState","this","props","wallet","pipeline","priceInMilliAlgo","maxWidth","AlgoAddress","textLabels","address","balance","mt","textAlign","justifyContent","style","textDecoration","mainColor","contrastColor","border","AlgoSendButton","index","recipient","process","amount","note","returnTo","context","onChange","flexDirection","ToastMessage","Success","message","secondaryMessage","actionText","React","Component","Pipeline","init","console","log","main","CheckoutError","handleRetry","Failure","onClick","Checkout","itemId","useParams","find","useAsyncRetry","a","connect","error","Error","balanceResponse","parseFloat","flexGrow","loading","Loader","size","value","retry","App","BaseStyles","minHeight","display","basename","backgroundColor","pt","pb","margin","pl","pr","Algo","height","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e33b395.chunk.js","sourcesContent":["import React from \"react\";\nimport { Flex, Button, Text, Icon } from \"pipeline-ui\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  price: number;\n  url: string;\n};\n\nexport const ButtonBuy: React.FC<Props> = ({ price, url }) => {\n  return (\n    <Flex alignItems=\"center\">\n      <Text fontSize={4}>{price}</Text>\n      <Icon name={\"Algo\"} ml={1} />\n\n      <Link to={url}>\n        <Button icon=\"ShoppingCart\" ml={3}>\n          Buy Now!\n        </Button>\n      </Link>\n    </Flex>\n  );\n};\n","import React from \"react\";\nimport { Card, Image, Heading, Box, Pill, Text } from \"pipeline-ui\";\nimport { ButtonBuy } from \"./ButtonBuy\";\n\nexport type Props = {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n  isNew?: boolean;\n};\n\nexport const Item: React.FC<Props> = ({\n  id,\n  name,\n  description,\n  price,\n  image,\n  isNew,\n}) => {\n  return (\n    <Box p={3} width={[1, 0.5, 0.33, 0.25]}>\n      <Card p={4}>\n        {isNew && (\n          <Box position=\"absolute\" right={2} top={2}>\n            <Pill color=\"green\">New!</Pill>\n          </Box>\n        )}\n        <Image alt={name} src={image} mb={3} />\n        <Heading as=\"h2\" mb={3}>\n          {name}\n        </Heading>\n        <Box mb={3}>\n          <Text>{description}</Text>\n        </Box>\n        <ButtonBuy price={price} url={`/checkout/${id}`} />\n      </Card>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Flex } from \"pipeline-ui\";\nimport { Item } from \"./Item\";\nimport items from \"../../data/items.json\";\n\nexport const Home: React.FC = () => {\n  return (\n    <Flex flexWrap=\"wrap\">\n      {items.map((item) => (\n        <Item {...item} key={item.id} />\n      ))}\n    </Flex>\n  );\n};\n","import React from \"react\";\nimport {\n  Box,\n  Flex,\n  ToastMessage,\n  Button,\n  Text,\n  AlgoSendButton,\n  AlgoAddress,\n} from \"pipeline-ui\";\nimport { Props as ItemProps } from \"../Home/Item\";\nimport { Link } from \"react-router-dom\";\n\nconst recipientAddress = process.env.REACT_APP_RECIPIENT_ADDRESS;\n\nconst assetIndex = 0; // 0 for ALGO\n\nconst convertToMilliAlgo = (price: number) => price * 1e6;\n\ntype Props = {\n  wallet: {\n    address: string;\n    balance: number;\n  };\n  item: ItemProps;\n  pipeline: any;\n};\nexport class Form extends React.Component<Props> {\n  state = {\n    status: \"ready\",\n    transactionId: \"\",\n  };\n\n  handleSend = (transactionId: string) => {\n    this.setState({ status: \"done\", transactionId });\n  };\n\n  render() {\n    const { wallet, item, pipeline } = this.props;\n    const { status, transactionId } = this.state;\n    const priceInMilliAlgo = convertToMilliAlgo(item.price);\n\n    return (\n      <Box width=\"100%\" maxWidth=\"800px\">\n        {status === \"ready\" ? (\n          <>\n            <Text>Connected wallet address (your wallet)</Text>\n            <AlgoAddress textLabels address={wallet.address} />\n            <Text>Current wallet balance {wallet.balance}</Text>\n\n            <Text mt={4} textAlign=\"right\">\n              Click \"Send\" button to pay <strong>{item.price} ALGO</strong> for\n              the <strong>{item.name}</strong> and finalize your order\n            </Text>\n            <Flex mt={1} justifyContent=\"space-between\">\n              <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n                <Button\n                  icon=\"LinkIcon\"\n                  mainColor=\"secondary\"\n                  contrastColor=\"darkgrey\"\n                  border=\"1px solid\"\n                >\n                  Go back to the Homepage\n                </Button>\n              </Link>\n              <AlgoSendButton\n                index={assetIndex}\n                recipient={recipientAddress}\n                amount={priceInMilliAlgo}\n                note={`Order itemId: ${item.id} itemName: ${item.name}`}\n                wallet={pipeline}\n                returnTo={\"txID\"}\n                context={this}\n                onChange={this.handleSend}\n              />\n            </Flex>\n          </>\n        ) : (\n          <Flex justifyContent=\"center\" width=\"100%\">\n            <Flex\n              width=\"100%\"\n              maxWidth=\"600px\"\n              alignItems=\"flex-end\"\n              flexDirection=\"column\"\n            >\n              <ToastMessage.Success\n                width=\"100%\"\n                message=\"Payment sent\"\n                secondaryMessage={`Transaction ID: ${transactionId}`}\n                actionText=\"\"\n              />\n              <Link to=\"/\">\n                <Button icon=\"LinkIcon\" mt={3}>\n                  Go back to the Homepage\n                </Button>\n              </Link>\n            </Flex>\n          </Flex>\n        )}\n      </Box>\n    );\n  }\n}\n","import { Pipeline } from \"pipeline-ui\";\n\nexport const pipeline = Pipeline.init();\n\nconsole.log(process.env);\n// Force testnet\nPipeline.main = process.env.REACT_APP_USE_TESTNET !== \"true\";\n\nexport const verifyWallet = (price: number) => async () => {\n  let address = \"\";\n  let balance = 0;\n  try {\n    address = await Pipeline.connect(pipeline);\n  } catch (error) {\n    // this is never reached even in case of an error\n    console.error(\"connection error: \", error.message);\n  }\n  if (!address) {\n    throw new Error(\"Connection error or wallet window closed\");\n  }\n  try {\n    const balanceResponse = await Pipeline.balance(address);\n    // this is required because balanceResponse is a string e.g. \"19.899 Algos\"\n    balance = parseFloat(balanceResponse);\n    console.log(balance);\n  } catch (error) {\n    // this is never reached even in case of an error\n    console.error(\"balance error: \", error.message);\n  }\n  if (!balance || balance < price) {\n    throw new Error(\n      `You must have at least ${price} Algos. Top up your wallet.`,\n    );\n  }\n  return { address, balance };\n};\n","import React from \"react\";\nimport { Flex, ToastMessage, Button, Box } from \"pipeline-ui\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  message: string;\n  handleRetry: () => void;\n};\n\nexport const CheckoutError: React.FC<Props> = ({ message, handleRetry }) => {\n  return (\n    <Flex justifyContent=\"center\" width=\"100%\">\n      <Flex\n        width=\"100%\"\n        maxWidth=\"500px\"\n        alignItems=\"flex-end\"\n        flexDirection=\"column\"\n      >\n        <ToastMessage.Failure\n          width=\"100%\"\n          message=\"Error\"\n          secondaryMessage={message}\n          actionText=\"\"\n        />\n        <Box>\n          <Link to=\"/\">\n            <Button icon=\"LinkIcon\" mt={3}>\n              Go back to the Homepage\n            </Button>\n          </Link>\n          <Button icon=\"Sync\" mt={3} ml={3} onClick={handleRetry}>\n            Retry\n          </Button>\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n","import React from \"react\";\nimport { Flex, Loader, Text } from \"pipeline-ui\";\nimport { useAsyncRetry } from \"react-use\";\nimport { Form } from \"./Form\";\nimport { useParams } from \"react-router-dom\";\nimport { verifyWallet, pipeline } from \"./verifyWallet\";\nimport items from \"../../data/items.json\";\nimport { CheckoutError } from \"./CheckoutError\";\n\nexport const Checkout: React.FC = () => {\n  const { itemId } = useParams<{ itemId: string }>();\n  const item = items.find((item) => `${item.id}` === itemId);\n  const state = useAsyncRetry(verifyWallet(item?.price || 0), []);\n\n  return (\n    <Flex flexGrow={1} width=\"100%\" justifyContent=\"center\" alignItems=\"center\">\n      {state.loading ? (\n        <Flex alignItems=\"center\">\n          <Loader color=\"primary\" size=\"100px\" />\n          <Text ml={4}>Checking available Algorand Wallet balance</Text>\n        </Flex>\n      ) : state.error || !state.value || !item ? (\n        <CheckoutError\n          message={\n            state.error\n              ? state.error.message\n              : \"Unexpected error. Please retry.\"\n          }\n          handleRetry={() => state.retry()}\n        />\n      ) : (\n        <Form wallet={state.value} item={item} pipeline={pipeline} />\n      )}\n    </Flex>\n  );\n};\n","import React from \"react\";\nimport { BaseStyles, Heading, Box, Flex } from \"pipeline-ui\";\nimport { Algo } from \"@pipeline-ui/icons\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Home } from \"./Home/Home\";\nimport { Checkout } from \"./Checkout/Checkout\";\n\nfunction App() {\n  return (\n    <BaseStyles\n      style={{ minHeight: \"100vh\", display: \"flex\", flexDirection: \"column\" }}\n    >\n      <Router basename={process.env.PUBLIC_URL}>\n        <Box as=\"header\" backgroundColor=\"grey\" pt={2} pb={2}>\n          <Link to=\"/\" style={{ textDecoration: \"none\", color: \"inherit\" }}>\n            <Flex\n              maxWidth={1400}\n              margin=\"0 auto\"\n              alignItems=\"center\"\n              pl={3}\n              pr={3}\n            >\n              <Algo color=\"black\" size=\"80\" />\n              <Heading as=\"h1\" ml={10}>\n                Algorand Demo Store\n              </Heading>\n            </Flex>\n          </Link>\n        </Box>\n        <Box height={1}></Box>\n        <Flex\n          as=\"main\"\n          maxWidth={1400}\n          margin=\"0 auto\"\n          flexGrow={1}\n          width=\"100%\"\n          flexDirection=\"column\"\n        >\n          <Switch>\n            <Route path=\"/checkout/:itemId\">\n              <Checkout />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Flex>\n      </Router>\n    </BaseStyles>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}